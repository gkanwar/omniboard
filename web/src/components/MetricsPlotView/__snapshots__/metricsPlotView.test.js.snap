// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MetricsPlotView should render correctly 1`] = `
<MetricsPlotView
  localStorageKey="metricsPlot|222"
  metricsResponse={
    Array [
      Object {
        "_id": "5a2b5a8c9c7a505a652f6127",
        "name": "pretrain.train.loss",
        "run_id": 222,
        "steps": Array [
          0,
          1,
          2,
          3,
          4,
        ],
        "timestamps": Array [
          "2017-12-09T03:37:44.425Z",
          "2017-12-09T03:41:54.414Z",
          "2017-12-09T03:46:01.766Z",
          "2017-12-09T03:50:07.365Z",
          "2017-12-09T03:54:12.560Z",
        ],
        "values": Array [
          0.7159541824544438,
          0.3840367944955761,
          0.3469185283233073,
          0.30483262065173106,
          0.28915774130337507,
        ],
      },
      Object {
        "_id": "5a2b5aa09c7a505a652f6146",
        "name": "pretrain.val.loss",
        "run_id": 223,
        "steps": Array [
          0,
          1,
          2,
          3,
          4,
        ],
        "timestamps": Array [
          "2017-12-09T03:38:01.945Z",
          "2017-12-09T03:42:11.673Z",
          "2017-12-09T03:46:18.843Z",
          "2017-12-09T03:50:24.377Z",
          "2017-12-09T03:54:29.752Z",
        ],
        "values": Array [
          0.32177006650114165,
          0.23237958704995795,
          0.23340759051386187,
          0.21925230575196739,
          0.20541178824900605,
        ],
      },
    ]
  }
  runId={222}
  stateFilterKeys={
    Array [
      "selectedMetricNames",
      "selectedXAxis",
      "selectedYAxis",
      "plotWidth",
      "plotHeight",
      "smoothing",
    ]
  }
>
  <div
    className="metrics-plot-view"
  >
    <div
      className="metrics-plot-left"
    >
      <h5>
        Metrics to plot
      </h5>
      <div
        id="plot-metric-names"
      >
        <MultiSelect
          buttonText={[Function]}
          data={
            Array [
              Object {
                "label": "pretrain.train.loss",
                "selected": true,
                "value": "pretrain.train.loss",
              },
              Object {
                "label": "pretrain.val.loss",
                "selected": true,
                "value": "pretrain.val.loss",
              },
            ]
          }
          enableHTML={true}
          id="metric_names"
          includeSelectAllOption={true}
          maxHeight={300}
          multiple={true}
          onChange={[Function]}
          onDeselectAll={[Function]}
          onSelectAll={[Function]}
          selectedClass="metric-name-selected"
        >
          <select
            data={
              Array [
                Object {
                  "label": "pretrain.train.loss",
                  "selected": true,
                  "value": "pretrain.train.loss",
                },
                Object {
                  "label": "pretrain.val.loss",
                  "selected": true,
                  "value": "pretrain.val.loss",
                },
              ]
            }
            id="metric_names"
            multiple={true}
          />
        </MultiSelect>
      </div>
      <h5>
        X-Axis Type
      </h5>
      <div
        id="plot-x-axis-types"
      >
        <div
          className="radio"
          key="XAxisPlot2220"
        >
          <label>
            <input
              checked={true}
              key="XAxisPlotInput2220"
              onChange={[Function]}
              test-attr="plot-x-axis-0"
              type="radio"
              value="steps"
            />
            Steps
          </label>
        </div>
        <div
          className="radio"
          key="XAxisPlot2221"
        >
          <label>
            <input
              checked={false}
              key="XAxisPlotInput2221"
              onChange={[Function]}
              test-attr="plot-x-axis-1"
              type="radio"
              value="timestamps"
            />
            Timestamps
          </label>
        </div>
      </div>
      <h5>
        Y-Axis Type
      </h5>
      <div
        id="plot-y-axis-types"
      >
        <div
          className="radio"
          key="YAxisPlot2220"
        >
          <label>
            <input
              checked={true}
              key="YAxisPlotInput2220"
              onChange={[Function]}
              test-attr="plot-y-axis-0"
              type="radio"
              value="linear"
            />
            Linear
          </label>
        </div>
        <div
          className="radio"
          key="YAxisPlot2221"
        >
          <label>
            <input
              checked={false}
              key="YAxisPlotInput2221"
              onChange={[Function]}
              test-attr="plot-y-axis-1"
              type="radio"
              value="logarithmic"
            />
            Logarithmic
          </label>
        </div>
      </div>
      <div
        className="smoothing-wrapper"
      >
        <div>
          Smoothing: 
          <NumericInput
            className="smoothing-input"
            componentClass="input"
            format={null}
            max={0.999}
            min={0}
            mobile="auto"
            onChange={[Function]}
            parse={null}
            precision={null}
            step={0.001}
            strict={false}
            style={Object {}}
            value={0}
          >
            <span
              className="react-numeric-input"
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              style={
                Object {
                  "display": "inline-block",
                  "position": "relative",
                }
              }
            >
              <input
                className="smoothing-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onInput={[Function]}
                onKeyDown={[Function]}
                onSelect={[Function]}
                style={
                  Object {
                    "WebkitAppearance": "none",
                    "border": "1px solid #ccc",
                    "borderRadius": 2,
                    "boxSizing": "border-box",
                    "display": "block",
                    "fontSize": "inherit",
                    "lineHeight": "normal",
                    "paddingLeft": 4,
                    "paddingRight": "3ex",
                  }
                }
                type="text"
                value="0"
              />
              <b
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchStart={[Function]}
                style={
                  Object {
                    "background": "rgba(0,0,0,.1)",
                    "borderColor": "rgba(0,0,0,.1)",
                    "borderRadius": "2px 2px 0 0",
                    "borderStyle": "solid",
                    "borderWidth": "1px 1px 0 1px",
                    "bottom": "50%",
                    "boxShadow": "-1px -1px 3px rgba(0,0,0,.1) inset,1px 1px 3px rgba(255,255,255,.7) inset",
                    "cursor": "default",
                    "position": "absolute",
                    "right": 2,
                    "textAlign": "center",
                    "top": 2,
                    "transition": "all 0.1s",
                    "width": "2.26ex",
                  }
                }
              >
                <i
                  style={
                    Object {
                      "borderColor": "transparent transparent rgba(0, 0, 0, 0.7)",
                      "borderStyle": "solid",
                      "borderWidth": "0 0.6ex 0.6ex 0.6ex",
                      "height": 0,
                      "left": "50%",
                      "margin": "-0.3ex 0 0 -0.56ex",
                      "position": "absolute",
                      "top": "50%",
                      "width": 0,
                    }
                  }
                />
              </b>
              <b
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchStart={[Function]}
                style={
                  Object {
                    "background": "rgba(0,0,0,.1)",
                    "borderColor": "rgba(0,0,0,.1)",
                    "borderRadius": "0 0 2px 2px",
                    "borderStyle": "solid",
                    "borderWidth": "0 1px 1px 1px",
                    "bottom": 2,
                    "boxShadow": "-1px -1px 3px rgba(0,0,0,.1) inset,1px 1px 3px rgba(255,255,255,.7) inset",
                    "cursor": "default",
                    "position": "absolute",
                    "right": 2,
                    "textAlign": "center",
                    "top": "50%",
                    "transition": "all 0.1s",
                    "width": "2.26ex",
                  }
                }
              >
                <i
                  style={
                    Object {
                      "borderColor": "rgba(0, 0, 0, 0.7) transparent transparent",
                      "borderStyle": "solid",
                      "borderWidth": "0.6ex 0.6ex 0 0.6ex",
                      "height": 0,
                      "left": "50%",
                      "margin": "-0.3ex 0 0 -0.56ex",
                      "position": "absolute",
                      "top": "50%",
                      "width": 0,
                    }
                  }
                />
              </b>
            </span>
          </NumericInput>
        </div>
        <ComponentEnhancer(undefined)
          activeDotStyle={Object {}}
          className="smoothing-slider"
          disabled={false}
          dotStyle={Object {}}
          dots={false}
          handle={[Function]}
          handleStyle={
            Array [
              Object {},
            ]
          }
          included={true}
          marks={Object {}}
          max={0.999}
          min={0}
          onAfterChange={[Function]}
          onBeforeChange={[Function]}
          onChange={[Function]}
          prefixCls="rc-slider"
          railStyle={Object {}}
          reverse={false}
          step={0.001}
          test-attr="plot-smoothing-slider"
          trackStyle={
            Array [
              Object {},
            ]
          }
          value={0}
          vertical={false}
        >
          <div
            className="rc-slider smoothing-slider"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            onMouseUp={[Function]}
            onTouchStart={[Function]}
          >
            <div
              className="rc-slider-rail"
              style={Object {}}
            />
            <Track
              className="rc-slider-track"
              included={true}
              length={0}
              offset={0}
              reverse={false}
              style={Object {}}
              vertical={false}
            >
              <div
                className="rc-slider-track"
                style={
                  Object {
                    "left": "0%",
                    "right": "auto",
                    "width": "0%",
                  }
                }
              />
            </Track>
            <Steps
              activeDotStyle={Object {}}
              dotStyle={Object {}}
              dots={false}
              included={true}
              lowerBound={0}
              marks={Object {}}
              max={0.999}
              min={0}
              prefixCls="rc-slider"
              reverse={false}
              step={0.001}
              upperBound={0}
              vertical={false}
            >
              <div
                className="rc-slider-step"
              />
            </Steps>
            <Handle
              className="rc-slider-handle"
              disabled={false}
              key="0"
              max={0.999}
              min={0}
              offset={0}
              prefixCls="rc-slider"
              reverse={false}
              style={Object {}}
              value={0}
              vertical={false}
            >
              <div
                aria-disabled={false}
                aria-valuemax={0.999}
                aria-valuemin={0}
                aria-valuenow={0}
                className="rc-slider-handle"
                onBlur={[Function]}
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                role="slider"
                style={
                  Object {
                    "left": "0%",
                    "right": "auto",
                    "transform": "translateX(-50%)",
                  }
                }
                tabIndex={0}
              />
            </Handle>
            <Marks
              className="rc-slider-mark"
              included={true}
              lowerBound={0}
              marks={Object {}}
              max={0.999}
              min={0}
              onClickLabel={[Function]}
              reverse={false}
              upperBound={0}
              vertical={false}
            >
              <div
                className="rc-slider-mark"
              />
            </Marks>
          </div>
        </ComponentEnhancer(undefined)>
      </div>
      <h5>
        Plot Size
      </h5>
      <div
        id="plot-size"
      >
        <div
          style={
            Object {
              "margin": 0,
              "width": 120,
            }
          }
        >
          <div>
            Width: 
            800
            px
          </div>
          <ComponentEnhancer(undefined)
            activeDotStyle={Object {}}
            className=""
            disabled={false}
            dotStyle={Object {}}
            dots={false}
            handle={[Function]}
            handleStyle={
              Array [
                Object {},
              ]
            }
            included={true}
            marks={Object {}}
            max={1200}
            min={700}
            onAfterChange={[Function]}
            onBeforeChange={[Function]}
            onChange={[Function]}
            prefixCls="rc-slider"
            railStyle={Object {}}
            reverse={false}
            step={50}
            test-attr="plot-width-slider"
            trackStyle={
              Array [
                Object {},
              ]
            }
            value={800}
            vertical={false}
          >
            <div
              className="rc-slider"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              onTouchStart={[Function]}
            >
              <div
                className="rc-slider-rail"
                style={Object {}}
              />
              <Track
                className="rc-slider-track"
                included={true}
                length={20}
                offset={0}
                reverse={false}
                style={Object {}}
                vertical={false}
              >
                <div
                  className="rc-slider-track"
                  style={
                    Object {
                      "left": "0%",
                      "right": "auto",
                      "width": "20%",
                    }
                  }
                />
              </Track>
              <Steps
                activeDotStyle={Object {}}
                dotStyle={Object {}}
                dots={false}
                included={true}
                lowerBound={700}
                marks={Object {}}
                max={1200}
                min={700}
                prefixCls="rc-slider"
                reverse={false}
                step={50}
                upperBound={800}
                vertical={false}
              >
                <div
                  className="rc-slider-step"
                />
              </Steps>
              <Handle
                className="rc-slider-handle"
                disabled={false}
                key="0"
                max={1200}
                min={700}
                offset={20}
                prefixCls="rc-slider"
                reverse={false}
                style={Object {}}
                value={800}
                vertical={false}
              >
                <div
                  aria-disabled={false}
                  aria-valuemax={1200}
                  aria-valuemin={700}
                  aria-valuenow={800}
                  className="rc-slider-handle"
                  onBlur={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="slider"
                  style={
                    Object {
                      "left": "20%",
                      "right": "auto",
                      "transform": "translateX(-50%)",
                    }
                  }
                  tabIndex={0}
                />
              </Handle>
              <Marks
                className="rc-slider-mark"
                included={true}
                lowerBound={700}
                marks={Object {}}
                max={1200}
                min={700}
                onClickLabel={[Function]}
                reverse={false}
                upperBound={800}
                vertical={false}
              >
                <div
                  className="rc-slider-mark"
                />
              </Marks>
            </div>
          </ComponentEnhancer(undefined)>
        </div>
        <div
          style={
            Object {
              "margin": 0,
              "width": 120,
            }
          }
        >
          <div>
            Height: 
            400
            px
          </div>
          <ComponentEnhancer(undefined)
            activeDotStyle={Object {}}
            className=""
            disabled={false}
            dotStyle={Object {}}
            dots={false}
            handle={[Function]}
            handleStyle={
              Array [
                Object {},
              ]
            }
            included={true}
            marks={Object {}}
            max={600}
            min={300}
            onAfterChange={[Function]}
            onBeforeChange={[Function]}
            onChange={[Function]}
            prefixCls="rc-slider"
            railStyle={Object {}}
            reverse={false}
            step={50}
            test-attr="plot-height-slider"
            trackStyle={
              Array [
                Object {},
              ]
            }
            value={400}
            vertical={false}
          >
            <div
              className="rc-slider"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              onTouchStart={[Function]}
            >
              <div
                className="rc-slider-rail"
                style={Object {}}
              />
              <Track
                className="rc-slider-track"
                included={true}
                length={33.33333333333333}
                offset={0}
                reverse={false}
                style={Object {}}
                vertical={false}
              >
                <div
                  className="rc-slider-track"
                  style={
                    Object {
                      "left": "0%",
                      "right": "auto",
                      "width": "33.33333333333333%",
                    }
                  }
                />
              </Track>
              <Steps
                activeDotStyle={Object {}}
                dotStyle={Object {}}
                dots={false}
                included={true}
                lowerBound={300}
                marks={Object {}}
                max={600}
                min={300}
                prefixCls="rc-slider"
                reverse={false}
                step={50}
                upperBound={400}
                vertical={false}
              >
                <div
                  className="rc-slider-step"
                />
              </Steps>
              <Handle
                className="rc-slider-handle"
                disabled={false}
                key="0"
                max={600}
                min={300}
                offset={33.33333333333333}
                prefixCls="rc-slider"
                reverse={false}
                style={Object {}}
                value={400}
                vertical={false}
              >
                <div
                  aria-disabled={false}
                  aria-valuemax={600}
                  aria-valuemin={300}
                  aria-valuenow={400}
                  className="rc-slider-handle"
                  onBlur={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="slider"
                  style={
                    Object {
                      "left": "33.33333333333333%",
                      "right": "auto",
                      "transform": "translateX(-50%)",
                    }
                  }
                  tabIndex={0}
                />
              </Handle>
              <Marks
                className="rc-slider-mark"
                included={true}
                lowerBound={300}
                marks={Object {}}
                max={600}
                min={300}
                onClickLabel={[Function]}
                reverse={false}
                upperBound={400}
                vertical={false}
              >
                <div
                  className="rc-slider-mark"
                />
              </Marks>
            </div>
          </ComponentEnhancer(undefined)>
        </div>
      </div>
    </div>
    <div
      className="metrics-plot-content"
    >
      <PlotlyComponent
        data={
          Array [
            Object {
              "hoverinfo": "none",
              "marker": Object {
                "color": "#1f77b4",
              },
              "mode": "lines+points",
              "name": "222.pretrain.train.loss.unsmoothed",
              "opacity": 0.2,
              "showlegend": false,
              "type": "scatter",
              "x": Array [
                0,
                1,
                2,
                3,
                4,
              ],
              "y": Array [
                0.7159541824544438,
                0.3840367944955761,
                0.3469185283233073,
                0.30483262065173106,
                0.28915774130337507,
              ],
            },
            Object {
              "marker": Object {
                "color": "#1f77b4",
              },
              "mode": "lines+points",
              "name": "222.pretrain.train.loss",
              "opacity": 1,
              "type": "scatter",
              "x": Array [
                0,
                1,
                2,
                3,
                4,
              ],
              "y": Array [
                0.7159541824544438,
                0.3840367944955761,
                0.3469185283233073,
                0.30483262065173106,
                0.28915774130337507,
              ],
            },
            Object {
              "hoverinfo": "none",
              "marker": Object {
                "color": "#2ca02c",
              },
              "mode": "lines+points",
              "name": "223.pretrain.val.loss.unsmoothed",
              "opacity": 0.2,
              "showlegend": false,
              "type": "scatter",
              "x": Array [
                0,
                1,
                2,
                3,
                4,
              ],
              "y": Array [
                0.32177006650114165,
                0.23237958704995795,
                0.23340759051386187,
                0.21925230575196739,
                0.20541178824900605,
              ],
            },
            Object {
              "marker": Object {
                "color": "#2ca02c",
              },
              "mode": "lines+points",
              "name": "223.pretrain.val.loss",
              "opacity": 1,
              "type": "scatter",
              "x": Array [
                0,
                1,
                2,
                3,
                4,
              ],
              "y": Array [
                0.32177006650114165,
                0.23237958704995795,
                0.23340759051386187,
                0.21925230575196739,
                0.20541178824900605,
              ],
            },
          ]
        }
        debug={false}
        fit={false}
        layout={
          Object {
            "height": 400,
            "title": Object {
              "text": "Metrics Plot",
            },
            "width": 800,
            "xaxis": Object {
              "autorange": true,
              "range": Array [
                0,
                4,
              ],
              "type": "linear",
            },
            "yaxis": Object {
              "autorange": true,
              "range": Array [
                0.1770483219042595,
                0.7443176487991903,
              ],
              "type": "linear",
            },
          }
        }
        style={
          Object {
            "display": "inline-block",
            "position": "relative",
          }
        }
        useResizeHandler={false}
      >
        <div
          style={
            Object {
              "display": "inline-block",
              "position": "relative",
            }
          }
        />
      </PlotlyComponent>
    </div>
  </div>
</MetricsPlotView>
`;
